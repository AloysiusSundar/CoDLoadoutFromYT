from pytube import YouTube
import moviepy.editor as mp
import speech_recognition as sr
import spacy
import re

def download_video(url, output_path='video.mp4'):
    yt = YouTube(url)
    stream = yt.streams.filter(file_extension='mp4').first()
    stream.download(filename=output_path)
    return output_path

def extract_audio(video_path, output_path='audio.wav'):
    clip = mp.VideoFileClip(video_path)
    clip.audio.write_audiofile(output_path)
    return output_path

def transcribe_audio(audio_path):
    r = sr.Recognizer()
    try:
        with sr.AudioFile(audio_path) as source:
            audio = r.record(source)
        transcript = r.recognize_sphinx(audio)
        return transcript
    except sr.UnknownValueError:
        print("Speech recognition could not understand audio")
        return None
    except sr.RequestError as e:
        print(f"Could not perform offline recognition; {e}")
        return None
    except Exception as e:
        print(f"An error occurred during transcription: {e}")
        return None

nlp = spacy.load("en_core_web_sm")

def extract_loadout_info(transcript):
    if transcript is None:
        return []
    doc = nlp(transcript)
    loadout_segments = []
    for sent in doc.sents:
        if any(keyword in sent.text.lower() for keyword in ['loadout', 'attachment', 'setup']):
            loadout_segments.append(sent.text)
    return loadout_segments

def extract_attachments(loadout_segments):
    attachments = []
    pattern = re.compile(r"(barrel|scope|grip|stock|magazine|perk|muzzle|underbarrel|laser)", re.IGNORECASE)
    for segment in loadout_segments:
        matches = pattern.findall(segment)
        if matches:
            attachments.append(segment)
    return attachments

def display_attachments(attachments):
    for i, attachment in enumerate(attachments):
        print(f"Loadout {i+1}:")
        print(attachment)
        print("\n")

if __name__ == "__main__":
    video_url = input("Enter the URL: ")
    downloaded_video = download_video(video_url)
    audio_path = extract_audio(downloaded_video)
    transcript = transcribe_audio(audio_path)
    loadout_info = extract_loadout_info(transcript)
    attachments = extract_attachments(loadout_info)
    display_attachments(attachments)
